@page "/"

@using System.Net.Http
@using Reststops.Presentation.Web.DTO
@using AspNetMonsters.Blazor.Geolocation

@inject HttpClient Http
@inject LocationService LocationService
@inject IJSRuntime jsRuntime

<section class="section">
    <Autocomplete
        Data="@autocompleteData"
        Size="Size.Medium"
        TextField="@((item) => item.Text)"
        ValueField="@((item) => item.Value)"
        SelectedValue="@selectedDestinationValue"
        SelectedValueChanged="@DestinationSelected"
        SearchChanged="@DestinationSearchChanged"
        Placeholder="Your destination?"
        Class="destinationTxt" />
</section>

<MiniMap
    StartLatitude="@startLatitude"
    StartLongitude="@startLongitude"
    EndLatitude="@endLatitude"
    EndLongitude="@endLongitude"
    RouteEncodedPolyline="@routeEncodedPolyline" />

<section class="section">
    
</section>


@code{
    public class DestinationSelectModel
    {
        public double[] Value { get; set; }
        public string Text { get; set; }
    }

    private bool searchButtonDisabled = true;
    private IEnumerable<DestinationSelectModel> autocompleteData;
    private double? startLatitude;
    private double? startLongitude;
    private double? endLatitude;
    private double? endLongitude;
    private string routeEncodedPolyline;
    private ReststopsResult reststops = new ReststopsResult();
    private double[] selectedDestinationValue { get; set; }

    private async Task DestinationSearchChanged(string text)
    {
        if (!string.IsNullOrWhiteSpace(text))
        {
            var result = await Http.GetFromJsonAsync<IEnumerable<PlacesResult>>(
                $"{Constants.API_BASEURL}/places?text={text}"
            );

            autocompleteData = result.Select(f => new DestinationSelectModel
            {
                Text = f.Name,
                Value = new double[2] { f.Longitude, f.Latitude }
            });
        }
    }

    private void CheckSearchButtonDisabled()
    {
        searchButtonDisabled = !startLongitude.HasValue ||
                                !startLatitude.HasValue ||
                                selectedDestinationValue == null;
    }

    protected override async Task OnInitializedAsync()
    {
        var location = await LocationService.GetLocationAsync();
        startLatitude = (double?)location.Latitude;
        startLongitude = (double?)location.Longitude;

        CheckSearchButtonDisabled();
    }

    private async Task DestinationSelected(object value)
    {
        selectedDestinationValue = value as double[];

        endLongitude = selectedDestinationValue[0];
        endLatitude = selectedDestinationValue[1];

        reststops = await Http.GetFromJsonAsync<ReststopsResult>(
            $"{Constants.API_BASEURL}/reststops?startLat={startLatitude}&startLon={startLongitude}&" +
            $"endLat=54.126163&endLon=12.152938"
        );

        routeEncodedPolyline = reststops.Route;

        CheckSearchButtonDisabled();
    }
}
