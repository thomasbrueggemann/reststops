@page "/"

@using System.Net.Http
@using Reststops.Presentation.Web.DTO
@using AspNetMonsters.Blazor.Geolocation
@using Reststops.Core.Entities

@inject HttpClient Http
@inject LocationService LocationService
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager

<Bar Breakpoint="Breakpoint.Desktop" Background="Background.Light" ThemeContrast="ThemeContrast.Light">
    <BarBrand>
        🏞 Reststops
    </BarBrand>

    <BarItem Float="Float.Right">
        <BarLink @onclick="UpdateReststops">
            @if (reststopsAreLoading == true)
            {
                <i class="fas fa-sync fa-spin"></i>
            }
            else
            {
                <i class="fas fa-sync"></i>
            }
        </BarLink>
    </BarItem>
</Bar>

<section class="section">
    @if (destination != null)
    {
        <Button Clicked="@OnDestinationClicked" Class="destinationChangeBtn" Block="true">
            <strong>Destination:</strong> @destination?.Name
        </Button>
    }
</section>

<div @onclick="OnMapClicked">
    @if (currentMapType == MapType.Overview)
    {
        <OverviewMap StartLatitude="@startLatitude"
            StartLongitude="@startLongitude"
            EndLatitude="@destination?.Latitude"
            EndLongitude="@destination?.Longitude"
            RouteEncodedPolyline="@routeEncodedPolyline" />
    }
    else
    {
        <DetailMap StartLatitude="@startLatitude"
            StartLongitude="@startLongitude"
            Reststops="@reststops?.Reststops" />
    }
</div>

<section class="section">
    <ResultsList Reststops="@reststops?.Reststops" />
</section>

@code{
    private enum MapType
    {
        Overview,
        Detail
    }

    #region Private Members

    private double? startLatitude;
    private double? startLongitude;
    private string routeEncodedPolyline;
    private ReststopsResult reststops;
    private double[] selectedDestinationValue = new double[] { 0, 0 };
    private DestinationResult destination;
    private MapType currentMapType = MapType.Overview;
    private bool reststopsAreLoading = false;

    #endregion

    #region Lifecycle Events

    protected override async Task OnInitializedAsync()
    {
        destination = await localStorage.GetItemAsync<DestinationResult>(
            "destination"
        );

        // check if destination is set, otherwise make user select one
        if (destination == null)
        {
            NavigationManager.NavigateTo("destination");
        }

        await UpdateReststops();
    }

    #endregion

    #region Private Methods

    private void OnMapClicked()
        => currentMapType = (currentMapType == MapType.Overview) ? MapType.Detail : MapType.Overview;

    private void OnDestinationClicked()
    {
        NavigationManager.NavigateTo("destination");
    }

    private async Task UpdateLocation()
    {
        var location = await LocationService.GetLocationAsync();

        startLatitude = (double?)location.Latitude;
        startLongitude = (double?)location.Longitude;
    }

    private async Task UpdateReststops()
    {
        reststopsAreLoading = true;

        await UpdateLocation();

        reststops = await Http.GetFromJsonAsync<ReststopsResult>(
            $"{Constants.API_BASEURL}/reststops?startLat={startLatitude}&startLon={startLongitude}&" +
            $"endLat={destination.Latitude}&endLon={destination.Longitude}"
        );

        routeEncodedPolyline = EncodedPolyline.Simplify(reststops.Route);
        reststopsAreLoading = false;
    }

    #endregion
}
