@page "/destination"

@using System.Net.Http
@using Reststops.Presentation.Web.DTO
@using AspNetMonsters.Blazor.Geolocation

@inject HttpClient Http
@inject LocationService LocationService
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage

<Bar Breakpoint="Breakpoint.Desktop" Background="Background.Light" ThemeContrast="ThemeContrast.Light">
    <BarBrand>
        🏞 Reststops
    </BarBrand>
</Bar>

<section class="section">
    <Field>
        <FieldLabel>Please tell us where you'll be going today:</FieldLabel>
        <TextEdit Placeholder="Your destination?"
                  Text="@destinationText"
                  TextChanged="@OnDestinationChanged" />
    </Field>

    <Table Borderless="true">
        <TableHeader>
            <TableRow>
                <TableHeaderCell>Select one:</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @if (destinations != null)
            {
                @foreach (var destination in destinations)
                {
                    <TableRow>
                        <TableRowCell>
                            <Button @onclick="@(async () => await OnDestinationClicked(destination))">
                                @destination.Name
                            </Button>
                        </TableRowCell>
                    </TableRow>
                }
            }
        </TableBody>
    </Table>
</section>


@code{

    #region Private Members

    private string destinationText;
    private IEnumerable<DestinationResult> destinations;
    private DestinationResult selectedDestination;

    #endregion

    #region Private Methods

    private async Task OnDestinationClicked(DestinationResult destination)
    {
        selectedDestination = destination;

        await localStorage.SetItemAsync<DestinationResult>("destination", destination);
        NavigationManager.NavigateTo("/");

    }

    private async Task OnDestinationChanged(string value)
    {
        destinationText = value;

        if (!string.IsNullOrWhiteSpace(value))
        {
            var result = await Http.GetFromJsonAsync<IEnumerable<PlacesResult>>(
                $"{Constants.API_BASEURL}/places?text={value}"
            );

            destinations = result.Select(p => new DestinationResult
            {
                Name = p.Name,
                Latitude = p.Latitude,
                Longitude = p.Longitude,
                UUID = Guid.NewGuid().ToString()
            });
        }
    }

    #endregion
}
